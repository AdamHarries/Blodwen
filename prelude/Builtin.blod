module Builtin

-- The most primitive data types; things which are used by desugaring

-- Laziness:

public export
data DelayReason = Infinite | LazyValue

public export
data Delayed : DelayReason -> Type -> Type where
     Delay : {0 t, a : _} -> (val : a) -> Delayed t a

public export
Force : {0 t, a : _} -> Delayed t a -> a
Force (Delay x) = x

-- This directive tells the elaborator how to implicitly insert 
-- laziness annotations
%lazy Delayed Delay Force

public export
Lazy : Type -> Type
Lazy t = Delayed LazyValue t

public export
Inf : Type -> Type
Inf t = Delayed Infinite t

-- Unit type and pairs

public export
data Unit = MkUnit

public export
data Pair : Type -> Type -> Type where
     MkPair : {0 a, b : Type} -> (1 x : a) -> (1 y : b) -> Pair a b

public export
fst : {0 a, b : Type} -> (a, b) -> a
fst (x, y) = x

public export
snd : {0 a, b : Type} -> (a, b) -> b
snd (x, y) = y

-- This directive tells auto implicit search what to use to look inside pairs
%pair Pair fst snd

-- The empty type

public export
data Void : Type where

-- Equality

public export
data Equal : forall a, b . a -> b -> Type where
     Refl : {0 x : a} -> Equal x x

public export
sym : x = y -> y = x
sym Refl = Refl

%inline
public export
rewrite__impl : {0 x, y : a} -> (0 p : _) -> x = y -> p y -> p x
rewrite__impl p Refl prf = prf

%rewrite Equal rewrite__impl

%inline
public export
replace : forall a, x, y, p . x = y -> p x -> p y
replace Refl prf = prf

public export
trans : forall a, b, c . a = b -> b = c -> a = c
trans Refl Refl = Refl

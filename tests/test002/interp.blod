-- There is some gratuitous strange indentation in this file. Please
-- leave it as it is to test the parser!

-- Some small sample definitions to illustrate TTImp, a dependent type
-- theory with implicit arguments and implicit name binding in patterns/types.
-- This elaborates to TT, which is also the core type theory of Idris.

-- A simple type, defined by a type constructor and a set of data
-- constructors
data Nat : Type where
     Z : Nat; S : Nat -> Nat

-- A function definition, defined by a type declaration and a list of
-- pattern clauses.

plus : Nat -> Nat -> Nat
plus Z     y = y
plus (S k) y = S (plus k y)

-- We need to declare which names can be used as implicit arguments. This
-- avoids any possibility of confusion with function names.

implicit n, a, b, c, k, ty
implicit i

data Vect : Nat -> Type -> Type where {
     Nil  : Vect Z a
  Cons : a -> Vect k a -> Vect (S k) a
}

-- Finite sets

data Fin : Nat -> Type where {
     FZ : Fin (S k);
     FS : Fin k -> Fin (S k);
}

-- Lookup an element by position in a vector.

lookup : Fin k -> Vect k ty -> ty;
lookup FZ (Cons t ts) = t;
lookup (FS i) (Cons t ts) = lookup i ts;

-- As a larger example, we'll implement the well-typed interpreter.
-- So we'll need to represent the types of our expression language:

data Ty : Type where
     Base : Type -> Ty
     Arrow : Ty -> Ty -> Ty

-- Ty can be translated to a host language type

interpTy : Ty -> Type
interpTy (Base t) = t
interpTy (Arrow s t) = interpTy s -> interpTy t

-- Declare some more implicits. We also give the type for 'gam', since it
-- uses more implicit names itself.

implicit s, t, u, gam; -- : Vect k Ty;

-- 'HasType i t gam' says that the variable at position i has type t
-- in context gam:

data HasType : Fin k -> Ty -> Vect k Ty -> Type where {
     Stop : HasType FZ t (Cons t gam);
     Pop  : HasType i t gam -> HasType (FS i) t (Cons u gam);
}

-- Expressions in our language, indexed by their contexts and types:

data Lang : Vect k Ty -> Ty -> Type where {
     Var : HasType i t gam -> Lang gam t
     Val : (x : interpTy a) -> Lang gam a
     Lam : (scope : Lang (Cons s gam) t) -> Lang gam (Arrow s t)
     App : Lang gam (Arrow s t) -> Lang gam s -> Lang gam t;
      Op : (interpTy a -> interpTy b -> interpTy c) ->
           Lang gam a -> Lang gam b -> Lang gam c;
}

-- To evaluate expressions, we'll need an environment to keep track of
-- the value of each variable:

namespace Env;

data Env : Vect n Ty -> Type where {
     Nil : Env Nil;
     Cons : (x : interpTy a) -> Env gam -> Env (Cons a gam);
}

-- Find a value in an environment
lookupEnv : HasType i t gam -> Env gam -> interpTy t;
lookupEnv Stop (Cons x xs) = x;
lookupEnv (Pop var) (Cons x xs) = lookupEnv var xs;

namespace Main;

-- Finally, interpret Lang expressions as host language expressions.

interp : Env gam -> Lang gam t -> interpTy t;
interp env (Var i) = lookupEnv i env;
interp env (Val x) = x;
interp env (App f a) = interp env f (interp env a);
interp env (Lam scope) = \var => interp (Cons var env) scope;
interp env (Op fn x y) = fn (interp env x) (interp env y);

-- A couple of tests:

testId : Lang Nil (Arrow (Base Nat) (Base Nat))
testId = Lam (Var Stop)

testAdd : Lang gam (Arrow (Base Nat) (Arrow (Base Nat) (Base Nat)))
testAdd = Lam (Lam (Op plus (Var Stop) (Var (Pop Stop))))

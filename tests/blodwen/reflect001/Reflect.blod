module Reflect

import Stuff

FilePos : Type
FilePos = (Int, Int)

data FC : Type where
     MkFC : String -> FilePos -> FilePos -> FC

the : (a : Type) -> a -> a
the _ x = x

-- 'the' is a TMP HACK until defaults work properly, then we can
-- safely do the "must be exactly one solution" for integers rather
-- than "take the first solution"
emptyFC : FC
emptyFC = MkFC "(empty)" (0, 0) (0, 0)

data Name = UN String
          | MN String Int
          | NS (List String) Name

data Count = M0 | M1 | MW

data PiInfo = Implicit | Explicit | AutoImplicit

data TTImp : Type where
     Var : FC -> Name -> TTImp
     Pi : FC -> Count -> PiInfo -> Maybe Name -> 
          (argTy : TTImp) -> (retTy : TTImp) -> TTImp
     Lam : FC -> Count -> PiInfo -> Name -> 
           (argTy : TTImp) -> (scope : TTImp) -> TTImp
     App : FC -> TTImp -> TTImp -> TTImp
     ImplicitApp : FC -> TTImp -> Name -> TTImp -> TTImp
     Implicit : FC -> TTImp
     TType : FC -> TTImp

data Clause : Type where
     PatClause : FC -> (lhs : TTImp) -> (rhs : TTImp) -> Clause
     Impossible : FC -> (lhs : TTImp) -> Clause

data Elab : Type -> Type where
     Pure : a -> Elab a
     (>>=) : {a, b : Type} -> 
             Elab a -> (a -> Elab b) -> Elab b
     Log : Int -> String -> Elab ()

     GenSym : String -> Elab Name

     DeclareType : Name -> TTImp -> Elab ()
     DefineFunc : Name -> List Clause -> Elab ()

silly : Elab Nat
silly
    = do x <- Pure (S Z)
         y <- Pure (S (S Z))
         Log 0 "Doing things"
         Pure (plus x y)

%runElab silly

nameTest : Elab Name
nameTest = GenSym "whatever"

%runElab nameTest

mkNatTerm : Nat -> TTImp
mkNatTerm Z = Var emptyFC (UN "Z")
mkNatTerm (S k) = App emptyFC (Var emptyFC (UN "S")) (mkNatTerm k)

mkNat : String -> Nat -> Elab ()
mkNat n num = 
    do DeclareType (UN n) (Var emptyFC (UN "Nat"))
       DefineFunc (UN n) 
           (PatClause emptyFC (Var emptyFC (UN n)) (mkNatTerm num) :: Nil)

%runElab mkNat "two" (S (S Z))

four : Nat
four = plus two two

test : Eq Reflect.four (S (S (S (S Z))))
test = Refl _


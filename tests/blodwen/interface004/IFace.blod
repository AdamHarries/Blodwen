module IFace

import Stuff

infixl 5 ==, /=

interface Eq b where
  (==) : b -> b -> Bool
  (/=) : b -> b -> Bool

Eq Nat where
   (==) Z Z = True
   (==) (S j) (S k) = j == k
   (==) _ _ = False

   (/=) x y = not (x == y)

Eq a => Eq (List a) where
   (==) [] [] = True
   (==) (x :: xs) (y :: ys) = x == y && xs == ys
   (==) _ _ = False
   
   (/=) x y = not (x == y)

Eq a => Eq (Maybe a) where
   (==) Nothing Nothing = True
   (==) (Just x) (Just y) = x == y
   (==) _ _ = False

   (/=) x y = not (x == y)


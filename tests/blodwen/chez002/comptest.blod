data Vect : Nat -> Type -> Type where
     Nil : Vect Z a
     (::) : a -> Vect k a -> Vect (S k) a

Show a => Show (Vect n a) where
  show xs = "[" ++ show' xs ++ "]"
    where
      show' : forall n . Vect n a -> String
      show' [] = ""
      show' [x] = show x
      show' (x :: xs) = show x ++ ", " ++ show' xs

empties : {m : Nat} -> Vect m (Vect Z a)
empties {m = Z} = []
empties {m = S k} = [] :: empties

transposeHelp : Vect m a -> Vect m (Vect n a) -> Vect m (Vect (S n) a)
transposeHelp [] [] = []
transposeHelp (x :: xs) (y :: ys) = (x :: y) :: transposeHelp xs ys

transpose : {m : Nat} -> Vect n (Vect m a) -> Vect m (Vect n a)
transpose [] = empties
transpose (x :: xs)
    = let xs_trans = transpose xs in
          transposeHelp x xs_trans

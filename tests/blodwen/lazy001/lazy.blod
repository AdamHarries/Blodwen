public export
data DelayReason = Infinite | LazyValue

public export
data Delayed : DelayReason -> Type -> Type where
     Delay : {0 t, a : _} -> (val : a) -> Delayed t a

public export
Force : {0 t, a : _} -> Delayed t a -> a
Force (Delay x) = x

%lazy Delayed Delay Force Infinite

public export
Lazy : Type -> Type
Lazy t = Delayed LazyValue t

public export
Inf : Type -> Type
Inf t = Delayed Infinite t

infixr 5 ::

namespace List
    public export
    data List a = Nil | (::) a (List a)

namespace Stream
    public export
    data Stream a = (::) a (Inf (Stream a))

ones : Stream Integer
ones = num :: ones
  where
    num : Integer -- gratuitous where for a regression test!
    num = 1

data Nat = Z | S Nat

take : Nat -> Stream a -> List a
take Z xs = Nil
take (S k) (x :: xs) = List.(::) x (take k xs)


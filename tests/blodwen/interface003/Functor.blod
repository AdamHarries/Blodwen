import Stuff

interface Functor f where
    map : (a -> b) -> f a -> f b

Functor List where
  map f [] = []
  map f (x :: xs) = f x :: map f xs

tryMap : Nat -> Nat -> List Nat
tryMap x y = map (plus x) [y, S y]

data Vect : _ -> Type -> Type where
     Nil : Vect Z a
     (::) : a -> Vect k a -> Vect (S k) a

Functor (Vect n) where
  map f [] = []
  map f (x :: xs) = f x :: map f xs

tryVMap : Nat -> Nat -> Vect (S (S Z)) Nat
tryVMap x y = map (plus x) [y, S y]

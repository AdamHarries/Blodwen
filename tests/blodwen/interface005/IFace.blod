module IFace

import Stuff

infixl 5 ==, /=

interface Eq b where
  (==) : b -> b -> Bool
  (/=) : b -> b -> Bool

  (==) x y = not (x /= y)
  (/=) x y = not (x == y)

Eq Nat where
  (==) Z Z = True
  (==) (S j) (S k) = j == k
  (==) _ _ = False

[silly] Eq Nat where
  (==) Z Z = False
  (==) (S j) (S k) = j == k
  (==) _ _ = True

Eq a => Eq (List a) where
  (==) [] [] = True
  (==) (x :: xs) (y :: ys) = x == y && xs == ys
  (==) _ _ = False
   
[alsoSilly] Eq a => Eq (List a) where
  (==) [] [] = False
  (==) (x :: xs) (y :: ys) = x == y && xs == ys
  (==) _ _ = True
   
data Compare = LT | EQ | GT

test : Eq a => a -> a -> Bool
test x y = x == y


import Stuff

data Functor : (f : _) -> Type where
     [noHints, search f]
     MkFunctor : (map : {0 a, b: Type} -> (a -> b) -> f a -> f b) -> Functor f 

map : {auto c : Functor f} -> (a -> b) -> f a -> f b
map {c = MkFunctor map_meth} = map_meth

%hint
ListFunctor : Functor List

mapList : (a -> b) -> List a -> List b
mapList f [] = []
mapList f (x :: xs) = f x :: map f xs

ListFunctor = MkFunctor mapList

tryMap : Nat -> Nat -> List Nat
tryMap x y = map (plus x) [y, S y]

data Vect : _ -> Type -> Type where
     Nil : Vect Z a
     (::) : a -> Vect k a -> Vect (S k) a

%hint
VectFunctor : Functor (Vect n)

mapVect : {0 n : Nat} -> {0 a, b : _} -> (a -> b) -> Vect n a -> Vect n b
mapVect f [] = []
mapVect f (x :: xs) = f x :: map f xs

VectFunctor = MkFunctor mapVect

tryVMap : Nat -> Nat -> Vect (S (S Z)) Nat
tryVMap x y = map (plus x) [y, S y]



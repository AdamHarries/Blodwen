module Stuff

public export
data Bool = True | False

public export
data DelayReason = Infinite | LazyValue

public export
data Delayed : DelayReason -> Type -> Type where
     Delay : {t, a : _} -> (val : a) -> Delayed t a

public export
Force : {t, a : _} -> Delayed t a -> a
Force (Delay x) = x

%lazy Delayed Delay Force

public export
Lazy : Type -> Type
Lazy t = Delayed LazyValue t

public export
Inf : Type -> Type
Inf t = Delayed Infinite t

intToBool : Int -> Bool
intToBool 0 = False
intToBool x = True

public export
ifThenElse : Bool -> Lazy a -> Lazy a -> a
ifThenElse True t e = t
ifThenElse False t e = e

public export
data Nat = Z | S Nat

fromInteger : Integer -> Nat
fromInteger x = ifThenElse (intToBool (prim__eq_Integer x 0)) 
                      Z (S (fromInteger (prim__sub_Integer x 1)))

public export
plus : Nat -> Nat -> Nat
plus Z y = y
plus (S k) y = S (plus k y)

public export
data List a = Nil | (::) a (List a)

data Eq : a -> b -> Type where
     Refl : (x : a) -> Eq x x

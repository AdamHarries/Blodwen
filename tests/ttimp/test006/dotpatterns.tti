implicit a, x;

data Nat : Type where {
     Z : Nat;
     S : Nat -> Nat;
}

plus : Nat -> Nat -> Nat;
plus Z     y = y;
plus (S k) y = S (plus k y);

data Eq : a -> a -> Type where {
     Refl : (x : a) -> Eq x x;
}

foo : (n : Nat) -> (m : Nat) -> Eq n m -> Nat;
foo (S m) (S m) (Refl (S m)) = m;

-- should fail
silly : Nat -> Nat;
silly (plus n m) = plus n m;



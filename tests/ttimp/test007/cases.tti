data Nat : Type where {
     Z : Nat;
     S : Nat -> Nat;
}

plus : Nat -> Nat -> Nat;
plus Z     y = y;
plus (S k) y = S (plus k y);

implicit a, b, c, k, n, m;

data Vect : Nat -> Type -> Type where {
     Nil  : Vect Z a;
     Cons : a -> Vect k a -> Vect (S k) a;
}

append : Vect n a -> Vect m a -> Vect (plus n m) a;
append {a=a} {n=n} {m=m} xs ys
    = let { case_app : {0 n : _} -> Vect n a -> Vect (plus n m) a;
            case_app Nil = ys;
            case_app (Cons x xs) = Cons x (append xs ys);
          } in case_app xs;

-- append {a=a} {n=n} {m=m} xs ys
--     = case xs of {
--            Nil => ys;
--            Cons x xs => Cons x (append xs ys);
--       };

Vect $n $a -> Vect $m $a -> Vect (plus $n $m) $a
append (Cons 1 (Cons 2 Nil)) (Cons 3 (Cons 4 Nil))

(env : Env $xs) -> Env $xs
(env : Env (Cons 5 $xs)) -> Env $xs

(xs : Vect _ Int) -> Env (Cons 5 xs) -> Env xs

Eq $xs (Cons 5 $xs) -- should fail with a cycle

Env $xs -> (q : Eq $xs $xs) -> Nat
(foo : Int) -> (x : _) -> Eq x x -> Vect x Int
(x : _) -> Eq x x -> Nat
(foo : Int) -> (x : _) -> Eq x x -> Nat

Silly $env -> Silly $env
(bar : Int) -> (s : Silly $env) -> Silly $env

($a -> $b) -> $a
Int -> ($a -> $b) -> $a



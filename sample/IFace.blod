module IFace

import Stuff

infixl 5 ==, /=

-- %logging 5
interface Eq b where
  (==) : b -> b -> Bool
  (/=) : b -> b -> Bool
%logging 0

{-
data Compare = LT | EQ | GT

interface Eq a => Ord a where
  compare : a -> a -> Compare

Eq a => Eq (List a) where
   (==) = ?foo

Eq Nat where
   (==) Z Z = True
   (==) (S j) (S k) = j == k
   (==) _ _ = False

   (/=) x y = not (x == y)

{-
foo : Ord a => a -> a -> Bool
foo x y = x == y

-- %hint
-- testEq : Eq Integer
-- 
-- %hint
-- testOrd : Ord Integer
-}
-}

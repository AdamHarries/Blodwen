module IFace

import Stuff

infixl 5 ==, /=

interface Eq b where
  (==) : b -> b -> Bool
  (/=) : b -> b -> Bool

Eq Nat where
   (==) Z Z = True
   (==) (S j) (S k) = j == k
   (==) _ _ = False

   (/=) x y = not (x == y)

[silly] Eq Nat where
   (==) Z Z = False
   (==) (S j) (S k) = j == k
   (==) _ _ = True

   (/=) x y = not (x == y)

Eq a => Eq (List a) where
   (==) [] [] = True
   (==) (x :: xs) (y :: ys) = x == y && xs == ys
   (==) _ _ = False
   
   (/=) x y = not (x == y)

(Eq a, Eq b) => Eq (a, b) where
   (==) (x, y) (x', y') = x == x' && y == y'

[alsoSilly] Eq a => Eq (List a) where
   (==) [] [] = False
   (==) (x :: xs) (y :: ys) = x == y && xs == ys
   (==) _ _ = True
   
   (/=) x y = not (x == y)

test : ((Eq b, Eq b, Eq a), Eq b) => a -> a -> Bool
test x y = x == y

interface DecEq a where
  decEq : (x : a) -> (y : a) -> Dec (x = y)

-- %logging 6
-- eqNat : (x : Nat) -> (y : Nat) -> Dec (x = y)
-- eqNat (S x) (S y)
--     = case eqNat x y of
--            Yes Refl => Yes Refl
-- eqNat Z Z = Yes Refl
-- %logging 0

%logging 7
(DecEq a, {x : a} -> Eq (p x)) => Eq (DPair a p) where
   (==) (MkDPair x y) (MkDPair x' y') 
       = case decEq x x' of
              Yes Refl => y == y'
              No _ => False
%logging 0

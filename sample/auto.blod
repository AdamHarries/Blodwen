-- Some small sample definitions to illustrate TTImp, a dependent type
-- theory with implicit arguments and implicit name binding in patterns/types.
-- This elaborates to TT, which is also the core type theory of Idris.

-- A simple type, defined by a type constructor and a set of data
-- constructors

data Nat : Type where {
     Z : Nat;
     S : Nat -> Nat;
}

-- A function definition, defined by a type declaration and a list of
-- pattern clauses.

plus : Nat -> Nat -> Nat;
plus Z     y = y;
plus (S k) y = S (plus k y);

-- Unlike Idris, we need to say which names are valid as implicit arguments,
-- which avoids any confusion with existing names.

implicit n, m, k, a, x, y;

namespace List;

data List : Type -> Type where {
     Nil  : List a;
     Cons : a -> List a -> List a;
}

length : List a -> Nat;
length Nil = Z;
length (Cons x xs) = S (length xs);

append : List a -> List a -> List a;
append Nil         ys = ys;
append (Cons x xs) ys = Cons x (append xs ys);

implicit xs : List a;

data Elem : a -> List a -> Type where {
     Here : Elem x (Cons x xs);
     There : Elem x xs -> Elem x (Cons y xs);
}

pos : (xs : List a) -> Elem x xs -> a;
pos (Cons x xs) Here = x;
pos (Cons x xs) (There p) = pos xs p;

posi : (x : a) -> (xs : List a) -> Elem x xs -> a;
posi _ (Cons x xs) Here = x;
posi _ (Cons x xs) (There p) = posi _ xs p;

test : Nat -> Nat;
test n = posi (S n) (Cons n (Cons (S n) (Cons n Nil))) ?help;

test2 : Int -> (inp : Nat) -> Int -> Nat;
test2 = ?help2;

mkTy : Type -> Type;
mkTy a = Int -> (inp : a) -> Int -> a;

test3 : (a : Type) -> mkTy a;
test3 = ?help3;


import Stuff

-- data Functor : (f : _) -> Type where
--      [noHints, search f]
--      MkFunctor : (map : forall a,b . (a -> b) -> f a -> f b) -> Functor f 

data MFunctor : (f : Type -> Type) -> Type where
     [noHints, search f]
     MMkFunctor : (map : (a -> b) -> f a -> f b) -> MFunctor f 

-- %logging 5
interface Functor (f : Type -> Type) where
    constructor MkFunctor
    map : (a -> b) -> f a -> f b
%logging 0

{-
Functor List where
  map f [] = []
  map f (x :: xs) = f x :: map f xs

%hint
ListFunctor : Functor List

mapList : (a -> b) -> List a -> List b
mapList f [] = []
mapList f (x :: xs) = f x :: map f xs

ListFunctor = MkFunctor mapList

tryMap : Nat -> Nat -> List Nat
tryMap x y = map (plus x) [y, S y]

data Vect : _ -> Type -> Type where
     Nil : Vect Z a
     (::) : a -> Vect k a -> Vect (S k) a

%hint
VectFunctor : Functor (Vect n)

mapVect : forall n, a, b . (a -> b) -> Vect n a -> Vect n b
mapVect f [] = []
mapVect f (x :: xs) = f x :: map f xs

VectFunctor = MkFunctor mapVect

tryVMap : Nat -> Nat -> Vect (S (S Z)) Nat
tryVMap x y = map (plus x) [y, S y]
-}

data Nat : Type where
     Z : Nat
     S : Nat -> Nat

plus : Nat -> Nat -> Nat
plus Z     y = y
plus (S k) y = S (plus k y)

adderTy : Nat -> Type
adderTy Z = Nat
adderTy (S $k) = (val : Nat) -> adderTy k

adder : (k : Nat) -> Nat -> adderTy k
adder Z acc = acc
adder (S k) acc = \num => adder k (plus num acc)

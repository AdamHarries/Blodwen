-- Some small sample definitions to illustrate TTImp, a dependent type
-- theory with implicit arguments and implicit name binding in patterns/types.
-- This elaborates to TT, which is also the core type theory of Idris.

-- A simple type, defined by a type constructor and a set of data
-- constructors

data Nat : Type where {
     Z : Nat;
     S : Nat -> Nat;
}

-- A function definition, defined by a type declaration and a list of
-- pattern clauses.

plus : Nat -> Nat -> Nat;
plus Z     y = y;
plus (S k) y = S (plus k y);

-- Unlike Idris, we need to say which names are valid as implicit arguments,
-- which avoids any confusion with existing names.

implicit n, m, k, a, x, y;

namespace List

    data List : Type -> Type where {
         Nil  : List a;
         Cons : a -> List a -> List a;
    }

    length : List a -> Nat;
    length Nil = Z;
    length (Cons x xs) = S (length xs);

    append : List a -> List a -> List a;
    append Nil         ys = ys;
    append (Cons x xs) ys = Cons x (append xs ys);

namespace Vect

    data Vect : Nat -> Type -> Type where {
         Nil  : Vect Z a;
         Cons : a -> Vect k a -> Vect (S k) a;
    }

    length : Vect n a -> Nat;
    length Nil = Z;
    length (Cons x xs) = S (length xs);

    append : Vect n a -> Vect m a -> Vect (plus n m) a;
    append Nil         ys = ys;
    append (Cons x xs) ys = Cons x (append xs ys);

    the : (a : Type) -> a -> _;
    the _ x = x;
